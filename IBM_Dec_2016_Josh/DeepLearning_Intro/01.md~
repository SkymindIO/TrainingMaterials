# DeepLearning INTRO

This might be too much repeat or need to be merged into other section

# Table of Contents

1. Goals of the DeepLearning4J project
2. Parts of the DeepLearning4J project
3. DataVec
4. ND4J
5. DL4J

<div style="page-break-after: always;"></div>

----------------------
# Defining Deep Learning

* Higher neuron counts than in previous generation neural networks
* Different and evolved ways to connect layers inside neural networks
* More computing power to train
* Automated Feature Learning


-------------------
<div style="page-break-after: always;"></div>

# Automated Feature Learning

* Deep Learning can be thought of as workflows for automated feature construction
	* From “feature construction” to “feature learning”
* As Yann LeCun says:
	* “machines that learn to represent the world”


-------------------
<div style="page-break-after: always;"></div>

# MNist Image Learning

* The Following Slides Show a Network as it learns features

-------------------
<div style="page-break-after: always;"></div>

![alt text](../resources/mnist1.jpg)

-------------------
<div style="page-break-after: always;"></div>

![alt text](../resources/mnist2.jpg)

-------------------
<div style="page-break-after: always;"></div>

![alt text](../resources/mnist3.jpg)


-------------------
<div style="page-break-after: always;"></div>

# Frequently Used DataVec classes

* CSVRecordReader
	* CSV Text Data
* ImageRecordReader	
	* Convert Image to numeric array representing pixel values
*  JacksonRecordReader
	* Parses JSON records
* ParentPathLabelGenerator
	* Builds labels based on Directory Path 
* Transform, Transform Process Builder, TransformProcess
	* Conversion tools


-------------------
<div style="page-break-after: always;"></div>

# ND4J

* Provides Scientific Computing Libraries
* Main features
	* Versatile n-dimensional array object
	* Multiplatform functionality including GPUs
	* Linear algebra and signal processing functions



-------------------
<div style="page-break-after: always;"></div>

# ND4J and DeepLearning

* Neural Nets work with Numerical Arrays
* Classes frequently Used
	* DataSet
	* DataSetIterator

-------------------
<div style="page-break-after: always;"></div>


# libND4J

* The C++ engine that powers ND4J
	* Speed
	* CPU and GPU support


-------------------
<div style="page-break-after: always;"></div>

# DeepLEarning4J

* Tools to build and train Neural Networks
* MultiLayerNetworkConfig
	* Build a Neural Network Configuration
* MultiLayerNetwork
	* Intiitalize a Network from a Configuration
* ComputationGraphConfiguration
	* A more flexible Network that MultiLayer
* ComputationGraph
	* Initialize a Computation Graph

-------------------
<div style="page-break-after: always;"></div>

# DeepLearning4J Frequently used Classes

* MultiLayerNetwork.fit
	* Trains a Model
* Evaluation
	* Evaluates model output against known labelled data
* ModelSerializer
	* Saves and loads trained models
* model.output
	* gets model's output for a single input


-------------------
<div style="page-break-after: always;"></div>

# DeepLearning4J sample code

```
MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
                .seed(seed)
                .iterations(1)
                .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)
                .learningRate(learningRate)
                .updater(Updater.NESTEROVS).momentum(0.9)
                .list()
                .layer(0, new DenseLayer.Builder().nIn(numInputs).nOut(numHiddenNodes)
                        .weightInit(WeightInit.XAVIER)
                        .activation("relu")
                        .build())
                .layer(1, new OutputLayer.Builder(LossFunction.NEGATIVELOGLIKELIHOOD)
                        .weightInit(WeightInit.XAVIER)
                        .activation("softmax").weightInit(WeightInit.XAVIER)
                        .nIn(numHiddenNodes).nOut(numOutputs).build())
                .pretrain(false).backprop(true).build();


        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        model.setListeners(new ScoreIterationListener(10));  //Print score every 10 parameter updates


        for ( int n = 0; n < nEpochs; n++) {
            model.fit( trainIter );
        }

        System.out.println("Evaluate model....");
        Evaluation eval = new Evaluation(numOutputs);
        while(testIter.hasNext()){
            DataSet t = testIter.next();
            INDArray features = t.getFeatureMatrix();
            INDArray lables = t.getLabels();
            INDArray predicted = model.output(features,false);

            eval.eval(lables, predicted);

        }
```		

-------------------
<div style="page-break-after: always;"></div>
