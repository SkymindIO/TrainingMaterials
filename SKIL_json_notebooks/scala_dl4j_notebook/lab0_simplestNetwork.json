{"paragraphs":[{"text":"%md\n\n### Feed-Forward Networks\n\nFeed-forward networks are those in which there is not cyclic connection between the network layers. The input flows forward towards the output after going through several intermediate layers. A typical feed-forward network looks like this:\n\n|---|---|---|\n|**Feed-forward network** | ![A typical feed-forward network](https://upload.wikimedia.org/wikipedia/en/5/54/Feed_forward_neural_net.gif) | [Source](https://upload.wikimedia.org/wikipedia/en/5/54/Feed_forward_neural_net.gif) |\n\n### What you will learn\n\n1. Create a feedforward neural network.\n2. Train and tune a model.\n","user":"admin","dateUpdated":"2018-11-30T15:42:36+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Feed-Forward Networks</h3>\n<p>Feed-forward networks are those in which there is not cyclic connection between the network layers. The input flows forward towards the output after going through several intermediate layers. A typical feed-forward network looks like this:</p>\n<p>|&mdash;|&mdash;|&mdash;|\n<br  />|<strong>Feed-forward network</strong> | <img src=\"https://upload.wikimedia.org/wikipedia/en/5/54/Feed_forward_neural_net.gif\" alt=\"A typical feed-forward network\" /> | <a href=\"https://upload.wikimedia.org/wikipedia/en/5/54/Feed_forward_neural_net.gif\">Source</a> |</p>\n<h3>What you will learn</h3>\n<ol>\n<li>Create a feeedforward neural network.</li>\n<li>Train and tune a model.</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1543566486680_2066011386","id":"20171020-070208_2069142559","dateCreated":"2018-11-30T08:28:06+0000","dateStarted":"2018-11-30T15:42:20+0000","dateFinished":"2018-11-30T15:42:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:205"},{"text":"%md\n\n### Simplest Network - Predicting an output value from an input value\n0.5 -> 0.8\n\n Look for LAB STEP below. Enable run in paragraph to proceed\n 1. Declare the input and output data in INDArray format\n 2. Set up the network configuration\n 3. Declare MultiLayerNetwork, train the network\n 4. Tune the network\n 5. Change the input and output to below\n double[] inputArr = new double[]{0.4, 0.5};\n double[] outputArr = new double[]{0.23, 0.855};","dateUpdated":"2018-11-30T08:28:06+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Simplest Network - Predicting an output value from an input value</h3>\n<p>0.5 -> 0.8</p>\n<p>Look for LAB STEP below. Enable run in paragraph to proceed</p>\n<ol>\n<li>Declare the input and output data in INDArray format</li>\n<li>Set up the network configuration</li>\n<li>Declare MultiLayerNetwork, train the network</li>\n<li>Tune the network</li>\n<li>Change the input and output to below\n<br  />double[] inputArr = new double[]{0.4, 0.5};\n<br  />double[] outputArr = new double[]{0.23, 0.855};</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1543566486683_2066396135","id":"20171020-070710_1843650237","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:206"},{"text":"import org.deeplearning4j.api.storage.StatsStorage;\n\nimport org.deeplearning4j.ui.api.UIServer;\nimport org.deeplearning4j.ui.stats.StatsListener;\n\nimport org.deeplearning4j.ui.storage.InMemoryStatsStorage;\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm;\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration;\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\nimport org.deeplearning4j.nn.conf.layers.DenseLayer;\nimport org.deeplearning4j.nn.conf.layers.OutputLayer;\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\nimport org.deeplearning4j.nn.weights.WeightInit;\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener;\nimport org.nd4j.linalg.activations.Activation;\nimport org.nd4j.linalg.api.ndarray.INDArray;\nimport org.nd4j.linalg.factory.Nd4j;\nimport org.nd4j.linalg.learning.config.Nesterovs;\nimport org.nd4j.linalg.lossfunctions.LossFunctions;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport io.skymind.zeppelin.utils._;\n","dateUpdated":"2018-11-30T08:28:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.deeplearning4j.api.storage.StatsStorage\nimport org.deeplearning4j.ui.api.UIServer\nimport org.deeplearning4j.ui.stats.StatsListener\nimport org.deeplearning4j.ui.storage.InMemoryStatsStorage\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.layers.DenseLayer\nimport org.deeplearning4j.nn.conf.layers.OutputLayer\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport org.nd4j.linalg.factory.Nd4j\nimport org.nd4j.linalg.learning.config.Nesterovs\nimport org.nd4j.linalg.lossfunctions.LossFunctions\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport io.skymind.zeppelin.utils._\n"}]},"apps":[],"jobName":"paragraph_1543566486684_2064087641","id":"20171020-071303_1517144370","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:207"},{"text":"val seed = 123; // consistent Random Numbers needed for testing. Initial weights are randomized\nval epochs = 10; // Number of epochs(full passes of the data)\nval learningRate = 0.001; //How fast to adjust weights to minimize error\nval numInputs = 1; // number of input nodes\nval numOutputs = 1; // number of output nodes\nval nHidden = 5; // number of hidden nodes","dateUpdated":"2018-11-30T08:28:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"seed: Int = 123\nepochs: Int = 10\nlearningRate: Double = 0.001\nnumInputs: Int = 1\nnumOutputs: Int = 1\nnHidden: Int = 5\n"}]},"apps":[],"jobName":"paragraph_1543566486685_2064087641","id":"20181128-065210_373715267","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:208"},{"text":"%md\n\n### LAB STEP 1: Declare the input and output data in INDArray format","dateUpdated":"2018-11-30T08:28:06+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>LAB STEP 1: Declare the input and output data in INDArray format</h3>\n"}]},"apps":[],"jobName":"paragraph_1543566486685_2064087641","id":"20181128-065608_2099609649","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:209"},{"text":"\nval input = Nd4j.create(Array(0.5), Array(1,1))\nval output = Nd4j.create(Array(0.8), Array(1,1))","dateUpdated":"2018-11-30T08:28:06+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"input: org.nd4j.linalg.api.ndarray.INDArray = 0.5000\noutput: org.nd4j.linalg.api.ndarray.INDArray = 0.8000\n"}]},"apps":[],"jobName":"paragraph_1543566486686_2065241888","id":"20181128-065611_1421157918","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:210"},{"text":"%md\n\n### LAB STEP 2: Set up the feed-forward network configuration","dateUpdated":"2018-11-30T08:28:06+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>LAB STEP 2: Set up the feed-forward network configuration</h3>\n"}]},"apps":[],"jobName":"paragraph_1543566486687_2064857139","id":"20171020-072208_966782035","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:211"},{"text":"val config = new NeuralNetConfiguration.Builder()\n                .seed(seed)\n                .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n                .weightInit(WeightInit.XAVIER)\n                .updater(new Nesterovs(learningRate, 0.9))\n                .list()\n                .layer(0, new DenseLayer.Builder()\n                        .nIn(numInputs)\n                        .nOut(nHidden)\n                        .activation(Activation.TANH)\n                        .build())\n                .layer(1, new OutputLayer.Builder()\n                        .activation(Activation.IDENTITY)\n                        .lossFunction(LossFunctions.LossFunction.MSE)\n                        .nIn(nHidden)\n                        .nOut(numOutputs)\n                        .build())\n                .pretrain(false)\n                .backprop(true)\n                .build();\n\n","dateUpdated":"2018-11-30T08:28:06+0000","config":{"tableHide":true,"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"config: org.deeplearning4j.nn.conf.MultiLayerConfiguration = \n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"epochCount\" : 0,\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"@class\" : \"org.deeplearning4j.nn.conf.layers.DenseLayer\",\n      \"activationFn\" : {\n        \"@class\" : \"org.nd4j.linalg.activations.impl.ActivationTanH\"\n      },\n      \"biasInit\" : 0.0,\n      \"biasUpdater\" : null,\n      \"constraints\" : null,\n      \"dist\" : null,\n      \"gradientNormalization\" : \"None\",\n      \"gradientNormalizationThreshold\" : 1.0,\n      \"hasBias\" : true,\n      \"idropout\" : null,\n      \"iupdater\" : {\n        \"@class\" : \"org.nd4j.linalg.learning.config.Nesterovs\",\n        \"learnin..."}]},"apps":[],"jobName":"paragraph_1543566486688_2050621430","id":"20171020-071349_473511535","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:212"},{"text":"%md\n\n### LAB STEP 3: Set up the model and predict output","dateUpdated":"2018-11-30T08:28:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>LAB STEP 3: Set up the model and predict output</h3>\n"}]},"apps":[],"jobName":"paragraph_1543566486688_2050621430","id":"20181130-034627_1886896295","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:213"},{"text":"val model = new MultiLayerNetwork(config)\nmodel.init()\nprintln(model.summary())\n\nfor(i <- 0 until epochs)\n{\n    model.fit(input, output)\n    val predicted = model.output(input);\n    println(\"predicted: \" + predicted.toString());\n}\n\n\n","dateUpdated":"2018-11-30T08:28:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"model: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@1efdd208\n\n==========================================================================================================================================================================================================================================================\nLayerName (LayerType)                   nIn,nOut  TotalParams ParamsShape                             \n==========================================================================================================================================================================================================================================================\nlayer0 (DenseLayer)                     1,5         10        W:{1,5}, b:{1,5}                        \nlayer1 (OutputLayer)                    5,1         6         W:{5,1}, b:{1,1}                        \n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n            Total Parameters:  16\n        Trainable Parameters:  16\n           Frozen Parameters:  0\n==========================================================================================================================================================================================================================================================\n\npredicted: -0.8820\npredicted: -0.8493\npredicted: -0.8085\npredicted: -0.7606\npredicted: -0.7070\npredicted: -0.6486\npredicted: -0.5864\npredicted: -0.5214\npredicted: -0.4544\npredicted: -0.3862\n"}]},"apps":[],"jobName":"paragraph_1543566486689_2050236681","id":"20171020-072158_2072802023","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:214"},{"text":"%md\n\n### LAB STEP 4: Tune the model","dateUpdated":"2018-11-30T08:28:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>LAB STEP 4: Tune the model</h3>\n"}]},"apps":[],"jobName":"paragraph_1543566486690_2051390928","id":"20181130-011749_620018555","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:215"},{"text":"%md\n","dateUpdated":"2018-11-30T08:28:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1543566486692_2049082434","id":"20181130-034733_356024850","dateCreated":"2018-11-30T08:28:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:216"}],"name":"Feed-forward","id":"2DYBSN89P","angularObjects":{"2DXM4YV7C:existing_process":[],"2DX7DJ9W2:existing_process":[],"2DYCRPY9U:existing_process":[],"2DYTBP9MN:existing_process":[],"2DWDAZ37Z:existing_process":[],"2DX6GEWDE:existing_process":[],"2DZ64659N:existing_process":[],"2DWJ8MMCV:existing_process":[],"2DYE3N6W6:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}