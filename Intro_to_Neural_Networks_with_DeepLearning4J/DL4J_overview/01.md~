# DeepLearning4J Overview

# Table of Contents

1. Goals of the DeepLearning4J project
2. Parts of the DeepLearning4J project
3. DataVec
4. ND4J
5. DL4J

<div style="page-break-after: always;"></div>

----------------------
# Goals of the DeepLearning4J project

* Provide a Toolkit for using DeepLearning on the JVM
* Why Java
	* Enterprise users
	* Security
	* Flexibility


-------------------
<div style="page-break-after: always;"></div>

# Why Java

![alt text](../resources/tiobe.png)

-------------------
<div style="page-break-after: always;"></div>

# DeepLearning4J projects

* DataVec
	* Tools for ETL
* ND4J
	* Numeric Arrays, 
	* like Numpy is for Python ND4J is for Java
* libND4J
	* Native Libraries for efficent compute on GPU's/CPU's
* DeepLearning4J
	* Tools to build and train Neural Nets

-------------------
<div style="page-break-after: always;"></div>

# DataVec

* Neural Nets ingest numeric arrays
* Datavec helps you get from your_data => Numeric Array

-------------------
<div style="page-break-after: always;"></div>

# DataVec Example

* CSV => NDArray
```
public class CSVExample {

    private static Logger log = LoggerFactory.getLogger(CSVExample.class);

    public static void main(String[] args) throws  Exception {

        //First: get the dataset using the record reader. CSVRecordReader handles loading/parsing
        int numLinesToSkip = 0;
        String delimiter = ",";
        RecordReader recordReader = new CSVRecordReader(numLinesToSkip,delimiter);
        recordReader.initialize(new FileSplit(new ClassPathResource("iris.txt").getFile()));

        //Second: the RecordReaderDataSetIterator handles conversion to DataSet objects, ready for use in neural network
        int labelIndex = 4;     //5 values in each row of the iris.txt CSV: 4 input features followed by an integer label (class) index. Labels are the 5th value (index 4) in each row
        int numClasses = 3;     //3 classes (types of iris flowers) in the iris data set. Classes have integer values 0, 1 or 2
        int batchSize = 150;    //Iris data set: 150 examples total. We are loading all of them into one DataSet (not recommended for large data sets)

        DataSetIterator iterator = new RecordReaderDataSetIterator(recordReader,batchSize,labelIndex,numClasses);
        DataSet allData = iterator.next();
```		
-------------------
<div style="page-break-after: always;"></div>

# DataVec Code Explained

* RecordReader recordReader = new CSVRecordReader(numLinesToSkip,delimiter);
	* A RecordReader prepares a list of Writables
	* A Writable is an efficient Serialization format
* DataSetIterator iterator = new RecordReaderDataSetIterator
	* We are in DL4J know, with DataSetIterator
	* Builds an Iterator over the list of records
* DataSet allData = iterator.next();
	* Builds a DataSet



-------------------
<div style="page-break-after: always;"></div>

# Frequently Used DataVec classes

* CSVRecordReader
	* CSV Text Data
* ImageRecordReader	
	* Convert Image to numeric array representing pixel values
*  JacksonRecordReader
-------------------
<div style="page-break-after: always;"></div>

-------------------
<div style="page-break-after: always;"></div>

-------------------
<div style="page-break-after: always;"></div>


# ND4J


-------------------
<div style="page-break-after: always;"></div>

# libND4J

-------------------
<div style="page-break-after: always;"></div>

# DeepLearning4J
-------------------
<div style="page-break-after: always;"></div>

-------------------
<div style="page-break-after: always;"></div>
