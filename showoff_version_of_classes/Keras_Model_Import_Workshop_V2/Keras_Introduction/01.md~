!SLIDE

# What is Keras?

* High Level Python based Deep Learning Framework
* Developed by Francois Chollet
* Python frontend for:
  * Tenserflow
  * Theano


!SLIDE

# What are Tensorflow and Theano?

* Symbolic Math Libraries
* Define graphs of Computations

!SLIDE

# The Process of Building a Neural Network in Keras

* Data Ingestion
  * NumPY, pandas
* Neural Network Configuration
  * Keras model
* Training the Network
  * Keras model.fit
* Using the Network
  * Keras model.predict

!SLIDE

# Benefits of Keras 

* Python
  * Familiar
  * NumPY
  * Notebooks
  * Data Science

!SLIDE

# Challenges of Keras

* Migration to an Enterprise Production Environment may be challenging

!SLIDE

# Benefits of Python

* Loosely typed
* Rapid update cycle

!SLIDE


# Challenges of Python

* Loosely typed
* Rapid Update cycle

!SLIDE

# Keras Example #

* Classification 3 species of Iris flowers based on measurements

petal length, petal width, sepal length, sepal width

	6.4,3.2,5.3,2.3,2
	6.5,3.0,5.5,1.8,2
	7.7,3.8,6.7,2.2,2
	7.7,2.6,6.9,2.3,2
	6.0,2.2,5.0,1.5,2


!SLIDE

# Keras Example Continued....

* FeedForward Network
* 2 hidden layers



!SLIDE

# Keras Example Continued....#

Iris Classification into 3 species based on 4 measurements

	import numpy
	import pandas
	from keras.models import Sequential
	from keras.layers import Dense
	from keras.wrappers.scikit_learn import KerasClassifier
	from keras.utils import np_utils
	from sklearn.cross_validation import cross_val_score, KFold
	from sklearn.preprocessing import LabelEncoder
	from sklearn.pipeline import Pipeline
   
    # fix random seed for reproducibility
	seed = 7
	numpy.random.seed(seed)

    # load dataset
	dataframe = pandas.read_csv("iris.csv", header=None)
	dataset = dataframe.values
	X = dataset[:,0:4].astype(float)
	Y = dataset[:,4]
	print(X)
	print(Y)

!SLIDE

# Keras Example Continued.....#

    #encode class values as integers
	encoder = LabelEncoder()
	encoder.fit(Y)
	encoded_Y = encoder.transform(Y)


    # convert integers to dummy variables (hot encoded)
	dummy_y = np_utils.to_categorical(encoded_Y)
	print(dummy_y)
	
    # define baseline model
    #def baseline_model(): 
    # create model
    model = Sequential()
    model.add(Dense(4, input_dim=4, activation='relu'))
    model.add(Dense(3,activation='sigmoid'))
   
!SLIDE

# Keras Example  Continued.....#

    # Compile model
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    
    #    return model
    #model.fit
    model.fit(X, dummy_y, nb_epoch=200, batch_size=5)
    prediction = model.predict(numpy.array([[4.6,3.6,1.0,0.2]]));
    print(prediction);

!SLIDE

# Keras Example Continued....#

    # To save just the weights
    model.save_weights('/tmp/iris_model_weights')
    
    # To save the weights and the config
    # Note this is what is used for this demo
    model.save('/tmp/full_iris_model')

    # To save the Json config to a file
    json_string = model.to_json()
    text_file = open("/tmp/iris_model_json", "w")
    text_file.write(json_string)
    text_file.close()



!SLIDE

# Review of the Basic Keras Example

* The various tasks are handled with different libraries


!SLIDE

# Data Ingest in Keras uses Pandas

	dataframe = pandas.read_csv("iris.csv", header=None)
	dataset = dataframe.values
	X = dataset[:,0:4].astype(float)
	Y = dataset[:,4]
	print(X)
	print(Y)


!SLIDE

# Scikit Learn 

* Used for Data Transform Operations

		encoder = LabelEncoder()
		encoder.fit(Y)
		encoded_Y = encoder.transform(Y)

!SLIDE

# Keras Native Tools  

* Build the Model

	model = Sequential()
	model.add(Dense(4, input_dim=4, activation='relu'))
	model.add(Dense(3,activation='sigmoid'))

!SLIDE

# Keras Execution Backend

* DeepLearning involves large matrix operations
* Keras leverages Theano or Tensorflow backend for execution

